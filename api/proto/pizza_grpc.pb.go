// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/proto/pizza.proto

package pizza

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PizzaServiceClient is the client API for PizzaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PizzaServiceClient interface {
	PizzaName(ctx context.Context, in *PizzaNameRequest, opts ...grpc.CallOption) (*PizzaNameResponse, error)
	PizzaId(ctx context.Context, in *PizzaIdRequest, opts ...grpc.CallOption) (*PizzaIdResponse, error)
}

type pizzaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPizzaServiceClient(cc grpc.ClientConnInterface) PizzaServiceClient {
	return &pizzaServiceClient{cc}
}

func (c *pizzaServiceClient) PizzaName(ctx context.Context, in *PizzaNameRequest, opts ...grpc.CallOption) (*PizzaNameResponse, error) {
	out := new(PizzaNameResponse)
	err := c.cc.Invoke(ctx, "/pizza.PizzaService/PizzaName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) PizzaId(ctx context.Context, in *PizzaIdRequest, opts ...grpc.CallOption) (*PizzaIdResponse, error) {
	out := new(PizzaIdResponse)
	err := c.cc.Invoke(ctx, "/pizza.PizzaService/PizzaId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PizzaServiceServer is the server API for PizzaService service.
// All implementations must embed UnimplementedPizzaServiceServer
// for forward compatibility
type PizzaServiceServer interface {
	PizzaName(context.Context, *PizzaNameRequest) (*PizzaNameResponse, error)
	PizzaId(context.Context, *PizzaIdRequest) (*PizzaIdResponse, error)
	mustEmbedUnimplementedPizzaServiceServer()
}

// UnimplementedPizzaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPizzaServiceServer struct {
}

func (UnimplementedPizzaServiceServer) PizzaName(context.Context, *PizzaNameRequest) (*PizzaNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PizzaName not implemented")
}
func (UnimplementedPizzaServiceServer) PizzaId(context.Context, *PizzaIdRequest) (*PizzaIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PizzaId not implemented")
}
func (UnimplementedPizzaServiceServer) mustEmbedUnimplementedPizzaServiceServer() {}

// UnsafePizzaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PizzaServiceServer will
// result in compilation errors.
type UnsafePizzaServiceServer interface {
	mustEmbedUnimplementedPizzaServiceServer()
}

func RegisterPizzaServiceServer(s grpc.ServiceRegistrar, srv PizzaServiceServer) {
	s.RegisterService(&PizzaService_ServiceDesc, srv)
}

func _PizzaService_PizzaName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PizzaNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).PizzaName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pizza.PizzaService/PizzaName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).PizzaName(ctx, req.(*PizzaNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_PizzaId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PizzaIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).PizzaId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pizza.PizzaService/PizzaId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).PizzaId(ctx, req.(*PizzaIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PizzaService_ServiceDesc is the grpc.ServiceDesc for PizzaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PizzaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pizza.PizzaService",
	HandlerType: (*PizzaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PizzaName",
			Handler:    _PizzaService_PizzaName_Handler,
		},
		{
			MethodName: "PizzaId",
			Handler:    _PizzaService_PizzaId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/pizza.proto",
}
